import os

from utils import load_data, visualize_trajectory_2d, remove_landmark_outliers
from src.localization import find_localization_poses_landmarks
from src.mapping import get_predicted_landmarks
from src.slam import slam


if __name__=="__main__":

    # Change the dataset to run on the particular dataset
    dataset = "10"  # or "03"
    filename = os.path.join(os.getcwd(), f"data/{dataset}.npz")
    savedir = os.path.join(os.getcwd(), "results/")
    os.makedirs(savedir, exist_ok=True)

    print(f"Loading data for Dataset {dataset}...")
    ts, features, linear_velocity, angular_velocity, K, b, imu_T_cam = load_data(filename)

    print("Generating Dead Reckoning Trajectory...")
    poses, landmarks = find_localization_poses_landmarks(
      ts,
      features,
      linear_velocity,
      angular_velocity,
      K,
      b,
      imu_T_cam
    )
    clipped_landmarks = remove_landmark_outliers(landmarks)
    # fig, ax = visualize_trajectory_2d(poses,clipped_landmarks,path_name="Dead Reckoning",show_ori=True)
    # fig.savefig(savedir+f"pose-localization-{dataset}.png", dpi=600)

    print("Landmark Mapping...")
    predicted_landmarks = get_predicted_landmarks(
      poses,
		  ts,
		  features,
		  linear_velocity,
		  angular_velocity,
		  K,
		  b,
		  imu_T_cam
	)
    clipped_predicted_landmarks = remove_landmark_outliers(predicted_landmarks)
    fig, ax = visualize_trajectory_2d(poses, clipped_predicted_landmarks, path_name="Dead Reckoning", show_ori=True)
    fig.savefig(savedir+f"landmark-mapping-{dataset}.png", dpi=600)

    ######
    # The results shown in the report will differ from plots generated by this code.
    # As for every figure the noise and variance values were fine tuned. This runs only
    # one example for SLAM
    ######
    print("Running SLAM...")
    slam_robot_poses, landmark_mu = slam(
      ts,
      features,
      linear_velocity,
      angular_velocity,
      K,
      b,
      imu_T_cam,
      dataset
	)
    clipped_landmarks = remove_landmark_outliers(landmark_mu)
    fig, ax = visualize_trajectory_2d(slam_robot_poses, clipped_landmarks, path_name="SLAM Trajectory", show_ori=True)
    fig.savefig(savedir+f"slam-map-{dataset}.png", dpi=600)
